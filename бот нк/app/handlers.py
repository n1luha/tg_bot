import asyncio
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InputMediaPhoto, FSInputFile
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import app.keyboards as kb
import app.database.requests as rq

router = Router()

class QuizState(StatesGroup):
    waiting_for_name = State()
    question_index = State()
    score = State()
    questions = State()
    message_id = State()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    from_user_id = message.from_user.id
    already_played = await rq.has_played(from_user_id)

    if already_played:
        await message.answer("‚ùóÔ∏è–¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞) –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        return

    await rq.set_user(from_user_id)
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!\n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ –Ω–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏üé•.\n\n"
        "–ß—Ç–æ–±—ã —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å –¥–æ—Å—É–≥, –≤–æ –≤—Ä–µ–º—è –ù–æ—á–∏ –ö–∏–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞.\n"
        "–ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –≤—ã–¥–µ–ª—è–µ—Ç—Å—è 20 —Å–µ–∫—É–Ω–¥! –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ—Å–ª–µ–¥—É–µ—Ç, –≤–æ–ø—Ä–æ—Å –∏—Å—á–µ–∑–Ω–µ—Ç –±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.\n"
        "–†.S: –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å!.\n\n"
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É:\n\n"
        "üéû –§–∞–º–∏–ª–∏—è\nüéû –ò–º—è\nüéû –ò–Ω—Å—Ç–∏—Ç—É—Ç\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä:\n–ö—É–ª—å—Ç–º–∞—Å—Å–æ–≤ –ö—É–ª—å—Ç–º–∞—Å—Å, –§–∏–∑–ú–µ—Ö"
    )
    await state.set_state(QuizState.waiting_for_name)

@router.message(QuizState.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(user_name=name)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üëá",
        reply_markup=kb.start_quiz_kb()
    )

@router.callback_query(F.data == 'start_quiz')
async def start_quiz(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    try:
        await callback.message.delete()
    except:
        pass

    questions = await rq.get_all_questions()
    await state.update_data(question_index=0, score=0, questions=questions)
    await send_question(bot, callback.message.chat.id, state)

async def send_question(bot: Bot, user_id: int, state: FSMContext):
    data = await state.get_data()
    questions = data['questions']
    index = data['question_index']

    if index >= len(questions):
        await rq.save_result(
            tg_id=user_id,
            first_name=data.get("user_name", "–ë–µ–∑ –∏–º–µ–Ω–∏"),
            score=data['score'],
            total=len(questions)
        )
        await state.clear()
        await bot.send_message(
            user_id,
            "üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ ü§ù",
            reply_markup=kb.show_rating_kb()
        )
        return

    q = questions[index]
    question_text = (
        f"–í–æ–ø—Ä–æ—Å {index+1}:\n{q.text}\n\n"
        f"1. {q.option_1}\n2. {q.option_2}\n3. {q.option_3}\n\n"
        "‚è± –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: 20 —Å–µ–∫—É–Ω–¥"
    )

    send_with_photo = False
    photo_path = None

    if index == 4:
        photo_path = "static/5.webp"
        send_with_photo = True
    elif index == 9:
        photo_path = "static/10.webp"
        send_with_photo = True
    elif index == 14:
        photo_path = "static/15.webp"
        send_with_photo = True

    if send_with_photo and photo_path:
        try:
            photo = FSInputFile(photo_path)
            msg = await bot.send_photo(
                chat_id=user_id,
                photo=photo,
                caption=question_text,
                reply_markup=kb.answer_options_kb(q.id)
            )
            await state.update_data(is_photo_message=True)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ ({photo_path}), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            msg = await bot.send_message(
                user_id,
                question_text,
                reply_markup=kb.answer_options_kb(q.id)
            )
            await state.update_data(is_photo_message=False)
    else:
        msg = await bot.send_message(
            user_id,
            question_text,
            reply_markup=kb.answer_options_kb(q.id)
        )
        await state.update_data(is_photo_message=False)

    await state.update_data(message_id=msg.message_id)
    asyncio.create_task(update_timer(bot, user_id, msg.message_id, state))

async def update_timer(bot: Bot, user_id: int, message_id: int, state: FSMContext):
    for remaining in range(19, 0, -1):
        await asyncio.sleep(1)

        current_data = await state.get_data()
        if current_data.get("message_id") != message_id:
            return

        try:
            q = current_data['questions'][current_data['question_index']]
            updated_text = (
                f"–í–æ–ø—Ä–æ—Å {current_data['question_index']+1}:\n{q.text}\n\n"
                f"1. {q.option_1}\n2. {q.option_2}\n3. {q.option_3}\n\n"
                f"‚è± –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining} —Å–µ–∫—É–Ω–¥"
            )

            if current_data.get('is_photo_message', False):
                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                await bot.edit_message_caption(
                    chat_id=user_id,
                    message_id=message_id,
                    caption=updated_text,
                    reply_markup=kb.answer_options_kb(q.id)
                )
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                await bot.edit_message_text(
                    chat_id=user_id,
                    message_id=message_id,
                    text=updated_text,
                    reply_markup=kb.answer_options_kb(q.id)
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é

    current = await state.get_data()
    if current.get("message_id") == message_id:
        try:
            await bot.delete_message(user_id, message_id)
        except:
            pass
        await callback_answer_timeout(bot, user_id, state)

async def callback_answer_timeout(bot: Bot, user_id: int, state: FSMContext):
    data = await state.get_data()
    index = data['question_index']
    await state.update_data(question_index=index + 1)
    await send_question(bot, user_id, state)

@router.callback_query(F.data.startswith('answer_'))
async def answer_question(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = callback.data.split('_')
    q_id = int(data[1])
    chosen = int(data[2])

    context = await state.get_data()
    questions = context['questions']
    index = context['question_index']
    score = context['score']
    is_photo_message = context.get('is_photo_message', False)

    question = next((q for q in questions if q.id == q_id), None)
    if not question:
        await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if question.correct_option == chosen:
        score += 1

    await state.update_data(message_id=None)
    await callback.message.edit_reply_markup()

    if index < len(questions) - 1:
        try:
            if is_photo_message:
                await callback.message.edit_caption(
                    caption="–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å..."
                )
            else:
                await callback.message.edit_text(
                    "–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å..."
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.answer("–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")

    await asyncio.sleep(1)

    try:
        await callback.message.delete()
    except:
        pass

    await state.update_data(question_index=index + 1, score=score)
    await send_question(bot, callback.message.chat.id, state)

@router.callback_query(F.data == "show_rating")
async def show_rating(callback: CallbackQuery):
    await callback.answer()
    results = await rq.get_top_results()

    if not results:
        await callback.message.answer("–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    text = "üèÜ –¢–æ–ø-3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
    for i, r in enumerate(results, start=1):
        name = r.first_name or "–ê–Ω–æ–Ω–∏–º"
        text += f"{i}) {name} ‚Äî {r.score} –∏–∑ {r.total}\n"

    await callback.message.answer(text)
